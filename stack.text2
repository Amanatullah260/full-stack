import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { WelcomeComponent } from './welcome/welcome.component';
import { LoginComponent } from './login/login.component';
import { ErrorComponent } from './error/error.component';
import { ListTodosComponent } from './list-todos/list-todos.component';
import { MenuComponent } from './menu/menu.component';
import { FooterComponent } from './footer/footer.component';
import { LogoutComponent } from './logout/logout.component';
import { RouteComponent } from './route/route.component';
import { RouteGuard } from './route-guard.service/route-guard.service.component';
import { TodoComponent } from './todo/todo.component';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

@NgModule({
  declarations: [
    AppComponent,
    WelcomeComponent,
    LoginComponent,
    ErrorComponent,
    ListTodosComponent,
    MenuComponent,
    FooterComponent,
    LogoutComponent,
    RouteComponent,
    RouteGuard.ServiceComponent,
    TodoComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    HttpClientModule
  ],
  providers: [
    {provide: HTTP_INTERCEPTORS, userClass: HttpIntercepterBasicAuthService, mult}
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }



<H1>Todo</H1>

<div class="container">
<div class="alert alert-warning" *ngIf="todoForm.invalid">Enter valid values</div>


    <form(ngSubmit)="saveTodo()" #todoForm="ngForm">
    <fieldset class="from-group">
        <lable>Description</lable>
        <input type="text" [(ngModel)]="todo.description" class="form-control" name
    </fieldset>


    <fieldset class="form-group">
        <lable>Target Date</lable>
        <input type="date"
        [ngModel]="todo.targetDate  | date: 'yyyy-MM-dd' "
        (ngModelChange)="todo.targetDate = $event"
        class="form-control" name="targetDate" required="required">
    </fieldset>

    <button type="submit" class="btn btn-success">Save</button>
     </form> 
</div>


import { TodoDataService } from './../service/data/todo-data.service';
 import { Component, OnInIt } from '@angular/core';
 import { Router } from '@angular/router';

 export class Todo {
   constructor(
     public id: number,
     public description: string,
     public done: boolean,
     public targetDate: Date
   ){

   }
 }

@Component({
  selector: 'app-list-todos',
  templateUrl: './list-todos.component.html',
  styleUrls: ['./list-todos.component.css']
})
export class ListTodosComponent implements OnInit {
  todos = [
    new Todo(1, 'Learn to Dance', false, new Date ) 
    new Todo(2, 'Learn to Dance', true, new Date )
    {id : 1, description :},
    {id : 2, description : 'Become an Expert at Angular'},
    {id : 3, description : 'Visit India'}
  ]

  constructor(
    private todoService: TodoDataService
    private router : Router
  ) { }

  ngOnInit() {
    this.refreshTodo();
  }
refreshTodos(){
  this.todoService.retrieveAllTodos('in28minutes').subscribe(
    response => {
      console.log(response);
      this.todos = response;
    }
  )
}
}

deleteTodo(id) {
  console.log('delete todo ('in28minutes', id).subscribe (
    response => {
      console.log(response);
      this.message = 'Delete of Todo ${id} Successful!';
      this.refreshTodo();
    }
  )
}

updateTodo(id) {
  console.log('update ${id}')
  this.router.navigate(['todos'])
}

import { ComponentFixture, TestBed } from '@angular/core/testing';

import { RouteGuard.ServiceComponent } from './route-guard.service.component';

describe('RouteGuard.ServiceComponent', () => {
  let component: RouteGuard.ServiceComponent;
  let fixture: ComponentFixture<RouteGuard.ServiceComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ RouteGuard.ServiceComponent ]
    })
    .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(RouteGuard.ServiceComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

import { Component, OnInit } from '@angular/core';
import { HardcodedAuthenticationService } from '../service/hardcoded-authentication.service';

@Component({
  selector: 'app-route-guard.service',
  templateUrl: './route-guard.service.component.html',
  styleUrls: ['./route-guard.service.component.css']
})
export class RouteGuard.ServiceComponent implements OnInit {

  constructor() { }
  private hardcodedAuthenticationService: HardcodedAuthenticationService
  private router: Router) {

  }

  ngOnInit(): void {
  }

}


import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class HardcodedAuthenticationService {

  constructor() { }

  authenticate(user, password) {
    //console.log('before ' + this,isUserLoggedIn());
    if(username==="in28minutes" && password==='dummy') {
      //console.log('after ' + this.isUserLoggedIn());
      return true;
    }
      return false; 
  }
}

isUserLoggedIn() {
  let user = sessionStorage.getItem('authenticaterUser')
  return !(user === null)
}
 logout() {
   sessionStorage.removeItem('authenticaterUser')
 }

  }

import {HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { nextTick } from 'node:process';


@Injectable({
  providedIn: 'root'
})
export class HttpIntercepterBasicAuthService implements HttpInterceptor{

  constructor() { }

intercept(request: HttpRequest<any>, next: HttpHandler) {
  let username = 'in28minutes'
  let password = 'dummy'
  let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password)

  request = request.clone({
    setHeaders : {
      Authorization : basicAuthHeaderString
    
  })
}

return nextTick.handle(request);

}


import { TestBed } from '@angular/core/testing';

import { HttpIntercepterBasicAuthService } from './http-intercepter-basic-auth.service';

describe('HttpIntercepterBasicAuthService', () => {
  let service: HttpIntercepterBasicAuthService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(HttpIntercepterBasicAuthService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
